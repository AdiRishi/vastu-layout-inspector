---
description:
globs:
alwaysApply: false
---
# Coding Standards & Conventions

## TypeScript Guidelines
- Use strict TypeScript with proper type annotations
- Prefer interface over type for object definitions
- Use const assertions for immutable data
- Import types using `import type` syntax when possible
- Define component props with descriptive interfaces

## React Component Patterns
- Use functional components with hooks
- Prefer named exports over default exports for components
- Use React.forwardRef for components that need ref forwarding
- Implement proper error boundaries where needed

## File Naming Conventions
- Use PascalCase for component files: `MyComponent.tsx`
- Use camelCase for utility files: `utils.ts`
- Use kebab-case for page routes in app directory
- Use descriptive names that indicate purpose

## Component Structure
```typescript
// Component imports
import { type ComponentProps } from 'react'
import { cn } from '@/lib/utils'

// Type definitions
interface MyComponentProps extends ComponentProps<'div'> {
  variant?: 'default' | 'secondary'
  size?: 'sm' | 'md' | 'lg'
}

// Component implementation
export function MyComponent({
  className,
  variant = 'default',
  size = 'md',
  ...props
}: MyComponentProps) {
  return (
    <div
      className={cn(
        'base-styles',
        variants[variant],
        sizes[size],
        className
      )}
      {...props}
    />
  )
}
```

## Styling Guidelines
- Use Tailwind CSS classes for styling
- Leverage CSS variables for theming (defined in [globals.css](mdc:src/app/globals.css))
- Use `cn()` utility from [lib/utils](mdc:src/lib/utils.ts) for conditional classes
- Follow shadcn/ui patterns for component variants
- Prefer composition over inheritance for styling

## Import Organization
```typescript
// React and Next.js imports
import { useState } from 'react'
import { NextPage } from 'next'

// Third-party library imports
import { clsx } from 'clsx'

// Internal imports (use path aliases)
import { Button } from '@/components/ui/button'
import { useLocalStorage } from '@/hooks/use-local-storage'
import { cn } from '@/lib/utils'
```

## Path Aliases (configured in [components.json](mdc:components.json))
- `@/components` → `src/components`
- `@/lib` → `src/lib`
- `@/hooks` → `src/hooks`
- `@/ui` → `src/components/ui`

## Error Handling
- Use proper error boundaries for component trees
- Implement loading and error states for async operations
- Use React Hook Form with Zod for form validation
- Handle edge cases gracefully with fallback UI
