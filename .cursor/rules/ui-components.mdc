---
description:
globs:
alwaysApply: false
---
# UI Components & Design System

## shadcn/ui Configuration
This project uses shadcn/ui with the "New York" style configuration. Components are configured in [components.json](mdc:components.json) with the following settings:
- Style: `new-york` (clean, minimal design)
- RSC: `true` (React Server Components support)
- Base color: `neutral`
- CSS variables: `true` (for theming)
- Icon library: `lucide-react`

## Available UI Components
The project includes a comprehensive set of Radix UI components:
- **Layout**: Accordion, Collapsible, Separator, Scroll Area, Resizable Panels
- **Navigation**: Navigation Menu, Menubar, Context Menu, Dropdown Menu
- **Forms**: Button, Input, Select, Checkbox, Radio Group, Switch, Slider, Input OTP
- **Feedback**: Alert Dialog, Dialog, Popover, Hover Card, Tooltip, Progress
- **Display**: Avatar, Aspect Ratio, Tabs, Toggle, Toggle Group
- **Data**: Command (cmdk), Date Picker (react-day-picker), Charts (recharts)
- **Overlays**: Sheet (vaul), Toast (sonner)

## Component Usage Patterns

### Basic Button Example
```typescript
import { Button } from '@/components/ui/button'

// Usage with variants
<Button variant="default" size="md">
  Click me
</Button>

<Button variant="outline" size="sm">
  Secondary action
</Button>
```

### Form Components with React Hook Form
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Form, FormControl, FormField, FormItem, FormLabel } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'

const formSchema = z.object({
  name: z.string().min(2).max(50),
})

export function MyForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  })

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

## Theming & Styling
- CSS variables are defined in [globals.css](mdc:src/app/globals.css)
- Dark/light mode support via `next-themes`
- Custom properties follow HSL color format
- Use `cn()` utility for conditional styling
- Component variants use `class-variance-authority` (cva)

## Adding New Components
To add new shadcn/ui components:
```bash
npx shadcn@latest add [component-name]
```

Components will be automatically added to `src/components/ui/` directory with proper TypeScript types and styling.

## Component Composition
- Extend base components using composition
- Use `React.forwardRef` for ref forwarding
- Implement proper prop spreading with `...props`
- Follow the established variant patterns for consistency

## Icons
- Use `lucide-react` for all icons
- Import specific icons: `import { ChevronDown } from 'lucide-react'`
- Maintain consistent icon sizing across the application
